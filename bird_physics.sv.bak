module bird_physics(clk, reset, enable, flap, bird_x, bird_y);
	
	input logic clk, reset, enable, flap;
	output logic [10:0] bird_x, bird_y;
	
	enum {idle, falling, rising1, rising2, rising3} ps, ns;
	
	logic [2:0] counter;
	
	// next state logic
	always_comb begin
		case (ps)
			idle: if (enable) ns = falling;
					else			ns = rising;
					
			falling: if (flap) ns = rising1;
						else		 ns = falling;
						
			rising1: if (flap) 				  ns = rising1;
						else if (counter == 4) ns = rising2;
						else						  ns = rising1;
						
			rising2: if (flap)				  ns = rising1;
						else if (counter == 4) ns = rising3;
						else						  ns = rising2;
						
			rising3: if (flap)				  ns = rising1;
						else if (counter == 4) ns = falling;
						else						  ns = rising3;
		
		endcase // ps
	end // always_comb
	
	always_ff @(posedge clk) begin
		if (ps == idle)
			bird_y <= 200;
		else if (ps == falling)
			bird_y <= bird_y - 1;
		else if (ps == rising1)
			bird_y <= bird_y + 2;
		else if (ps == rising2)
			bird_y <= bird_y + 1;
		
		if (ps != ns)
			counter <= 0;
		else
			counter <= counter + 1;
	end
	
	// update state
	always_ff @(posedge clk) begin
		if (reset | ~enable)
			ps = idle;
		else
			ps = ns;
	end // always_ff
	
	// stationary x
	assign bird_x = 150;

endmodule // bird_physics