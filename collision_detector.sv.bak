module collision_detector(clk, reset, bird_x, bird_y, pipe1_x, pipe1_y, pipe2_x, pipe2_y, restart, collision);
	
	input logic clk, reset, restart;
	input logic [10:0] bird_x, bird_y, pipe1_x, pipe1_y, pipe2_x, pipe2_y;
	
	output logic collision;
	
	enum {clear, dead} ps, ns;
	
	always_comb begin
		case (ps)
			clear: if (hit_ground | hit_p1 | hit_p2) ns = dead;
					 else										  ns = clear;
					 
			dead: if (restart) ns = clear;
					else			 ns = dead;
					
		endcase	
	end // always_comb
	
	always_ff @(posedge clk) begin
		if (reset)
			ps <= clear;
		else
			ps <= ns;	
	end
	
	assign hit_wall = (bird_y > 474) | (bird_y < 9);
	assign hit_p1 = ((bird_x >= pipe1_left & bird_x <= pipe1_right) & (bird_y >= pipe1_y | bird_y <= (pipe1_y - 100)));
	assign hit_p2 = ((bird_x >= pipe2_left & bird_x <= pipe2_right) & (bird_y >= pipe2_y | bird_y <= (pipe2_y - 100)));
	
	assign pipe1_left = pipe1_x - 60 - 10; // pipe x - width of pipe - right bevel
	assign pipe1_right = pipe1_x;
	assign pipe2_left = pipe2_x - 60 - 10;
	assign pipe2_right = pipe2_x;

endmodule // collision_detector